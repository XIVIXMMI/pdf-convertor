plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '3.0.1'
}

group = 'com.omori'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
    // JavaFX (handled by JavaFX plugin)

    // Apache PDFBox
    implementation 'org.apache.pdfbox:pdfbox:2.0.29'
    
    // Apache POI
    implementation 'org.apache.poi:poi:5.2.5'
    implementation 'org.apache.poi:poi-ooxml:5.2.5'
    
    // Additional dependencies for POI
    implementation 'org.apache.commons:commons-compress:1.21'
    implementation 'org.apache.xmlbeans:xmlbeans:5.1.1'
    
    // Logging
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.slf4j:slf4j-api:2.0.16'
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    
    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
}

javafx {
    version = '17.0.13'
    modules = ['javafx.controls', 'javafx.fxml']
}

application {
    mainClass = 'com.omori.pdfconvertor.Main'
    applicationDefaultJvmArgs = [
        '-Dfile.encoding=UTF-8',
        '-Djava.awt.headless=false'
    ]
}

// Create custom runtime first, then use it with jpackage
task createCustomRuntime {
    doLast {
        def runtimeDir = file('build/custom-runtime')
        if (runtimeDir.exists()) {
            delete runtimeDir
        }
        
        exec {
            commandLine 'jlink',
                '--add-modules', 'java.base,java.logging,java.xml,java.desktop,java.naming,java.sql,jdk.unsupported',
                '--output', 'build/custom-runtime',
                '--strip-debug',
                '--compress', '2',
                '--no-header-files',
                '--no-man-pages'
        }
    }
}

// Create DMG with custom runtime
task createDMGWithCustomRuntime(dependsOn: ['fatJar', 'createCustomRuntime']) {
    doLast {
        def outputDir = file("build/distributions")
        outputDir.mkdirs()
        
        exec {
            commandLine 'jpackage',
                '--runtime-image', 'build/custom-runtime',
                '--input', 'build/libs',
                '--main-jar', 'pdf-convertor-1.0-SNAPSHOT-fat.jar',
                '--main-class', 'com.omori.pdfconvertor.Main',
                '--type', 'dmg',
                '--dest', 'build/distributions',
                '--name', 'PDFConverter-Custom',
                '--app-version', '1.0.0',
                '--vendor', 'Omori',
                '--mac-package-name', 'PDF Converter Custom',
                '--mac-package-identifier', 'com.omori.pdfconvertor.custom',
                '--mac-app-category', 'public.app-category.productivity',
                '--java-options', '-Dfile.encoding=UTF-8',
                '--java-options', '-Djava.awt.headless=false'
        }
    }
}

// Custom task for creating a fat JAR with JavaFX dependencies
task fatJar(type: Jar) {
    archiveClassifier = 'fat'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    manifest {
        attributes 'Main-Class': 'com.omori.pdfconvertor.Main'
    }
    
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

// Task to create DMG using jpackage - no custom runtime
task createDMG(dependsOn: fatJar) {
    doLast {
        def jarFile = file("build/libs/pdf-convertor-1.0-SNAPSHOT-fat.jar")
        def outputDir = file("build/distributions")
        outputDir.mkdirs()
        
        exec {
            commandLine 'jpackage',
                '--input', 'build/libs',
                '--main-jar', 'pdf-convertor-1.0-SNAPSHOT-fat.jar',
                '--main-class', 'com.omori.pdfconvertor.Main',
                '--type', 'dmg',
                '--dest', 'build/distributions',
                '--name', 'PDFConverter',
                '--app-version', '1.0.0',
                '--vendor', 'Omori',
                '--mac-package-name', 'PDF Converter',
                '--mac-package-identifier', 'com.omori.pdfconvertor',
                '--mac-app-category', 'public.app-category.productivity',
                '--java-options', '-Dfile.encoding=UTF-8',
                '--java-options', '-Djava.awt.headless=false'
        }
    }
}

test {
    useJUnitPlatform()
}

// Create distribution archives
distributions {
    main {
        distributionBaseName = 'PDFConverter'
    }
}